// Mocks generated by Mockito 5.4.2 from annotations
// in otomo/test/controllers/policies_agreement_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:otomo/domains/entities/policies_agreements.dart' as _i2;
import 'package:otomo/domains/entities/user.dart' as _i3;
import 'package:otomo/domains/repo/policies_agreements.dart' as _i4;
import 'package:otomo/domains/repo/user.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePoliciesAgreements_0 extends _i1.SmartFake
    implements _i2.PoliciesAgreements {
  _FakePoliciesAgreements_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_1 extends _i1.SmartFake implements _i3.User {
  _FakeUser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PoliciesAgreementsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPoliciesAgreementsRepository extends _i1.Mock
    implements _i4.PoliciesAgreementsRepository {
  MockPoliciesAgreementsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.PoliciesAgreements> get(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [userId],
        ),
        returnValue:
            _i5.Future<_i2.PoliciesAgreements>.value(_FakePoliciesAgreements_0(
          this,
          Invocation.method(
            #get,
            [userId],
          ),
        )),
      ) as _i5.Future<_i2.PoliciesAgreements>);

  @override
  _i5.Future<void> save(_i2.PoliciesAgreements? agreements) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [agreements],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i6.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> save(_i3.User? user) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [user],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.User> get(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [userId],
        ),
        returnValue: _i5.Future<_i3.User>.value(_FakeUser_1(
          this,
          Invocation.method(
            #get,
            [userId],
          ),
        )),
      ) as _i5.Future<_i3.User>);
}
