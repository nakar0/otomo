// Code generated by MockGen. DO NOT EDIT.
// Source: rollback.go

// Package mock_ucboundary is a generated GoMock package.
package mock_ucboundary

import (
	context "context"
	ucboundary "otomo/internal/app/usecase/ucboundary"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRollbackerFactory is a mock of RollbackerFactory interface.
type MockRollbackerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRollbackerFactoryMockRecorder
}

// MockRollbackerFactoryMockRecorder is the mock recorder for MockRollbackerFactory.
type MockRollbackerFactoryMockRecorder struct {
	mock *MockRollbackerFactory
}

// NewMockRollbackerFactory creates a new mock instance.
func NewMockRollbackerFactory(ctrl *gomock.Controller) *MockRollbackerFactory {
	mock := &MockRollbackerFactory{ctrl: ctrl}
	mock.recorder = &MockRollbackerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRollbackerFactory) EXPECT() *MockRollbackerFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockRollbackerFactory) New() ucboundary.Rollbacker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(ucboundary.Rollbacker)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockRollbackerFactoryMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockRollbackerFactory)(nil).New))
}

// MockRollbacker is a mock of Rollbacker interface.
type MockRollbacker struct {
	ctrl     *gomock.Controller
	recorder *MockRollbackerMockRecorder
}

// MockRollbackerMockRecorder is the mock recorder for MockRollbacker.
type MockRollbackerMockRecorder struct {
	mock *MockRollbacker
}

// NewMockRollbacker creates a new mock instance.
func NewMockRollbacker(ctrl *gomock.Controller) *MockRollbacker {
	mock := &MockRollbacker{ctrl: ctrl}
	mock.recorder = &MockRollbackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRollbacker) EXPECT() *MockRollbackerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRollbacker) Add(ctx context.Context, description string, rollbackFunc func(context.Context) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", ctx, description, rollbackFunc)
}

// Add indicates an expected call of Add.
func (mr *MockRollbackerMockRecorder) Add(ctx, description, rollbackFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRollbacker)(nil).Add), ctx, description, rollbackFunc)
}

// Rollback mocks base method.
func (m *MockRollbacker) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockRollbackerMockRecorder) Rollback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockRollbacker)(nil).Rollback), ctx)
}

// RollbackForPanic mocks base method.
func (m *MockRollbacker) RollbackForPanic(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackForPanic", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackForPanic indicates an expected call of RollbackForPanic.
func (mr *MockRollbackerMockRecorder) RollbackForPanic(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackForPanic", reflect.TypeOf((*MockRollbacker)(nil).RollbackForPanic), ctx)
}
