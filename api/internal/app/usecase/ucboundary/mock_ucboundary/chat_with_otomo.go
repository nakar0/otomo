// Code generated by MockGen. DO NOT EDIT.
// Source: chat_with_otomo.go

// Package mock_ucboundary is a generated GoMock package.
package mock_ucboundary

import (
	context "context"
	message "otomo/internal/app/domain/entity/message"
	user "otomo/internal/app/domain/entity/user"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChatWithOtomoUseCase is a mock of ChatWithOtomoUseCase interface.
type MockChatWithOtomoUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockChatWithOtomoUseCaseMockRecorder
}

// MockChatWithOtomoUseCaseMockRecorder is the mock recorder for MockChatWithOtomoUseCase.
type MockChatWithOtomoUseCaseMockRecorder struct {
	mock *MockChatWithOtomoUseCase
}

// NewMockChatWithOtomoUseCase creates a new mock instance.
func NewMockChatWithOtomoUseCase(ctrl *gomock.Controller) *MockChatWithOtomoUseCase {
	mock := &MockChatWithOtomoUseCase{ctrl: ctrl}
	mock.recorder = &MockChatWithOtomoUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatWithOtomoUseCase) EXPECT() *MockChatWithOtomoUseCaseMockRecorder {
	return m.recorder
}

// MessageToOtomo mocks base method.
func (m *MockChatWithOtomoUseCase) MessageToOtomo(ctx context.Context, userID user.ID, text string) (*message.MessageWithOtomo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageToOtomo", ctx, userID, text)
	ret0, _ := ret[0].(*message.MessageWithOtomo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageToOtomo indicates an expected call of MessageToOtomo.
func (mr *MockChatWithOtomoUseCaseMockRecorder) MessageToOtomo(ctx, userID, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageToOtomo", reflect.TypeOf((*MockChatWithOtomoUseCase)(nil).MessageToOtomo), ctx, userID, text)
}
