// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: chat_with_otomo_service.proto

package grpcgen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatWithOtomoService_MessageToOtomo_FullMethodName = "/ChatWithOtomoService/MessageToOtomo"
)

// ChatWithOtomoServiceClient is the client API for ChatWithOtomoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatWithOtomoServiceClient interface {
	MessageToOtomo(ctx context.Context, in *ChatWithOtomoMessageToOtomoRequest, opts ...grpc.CallOption) (*ChatWithOtomoMessageToOtomoResponse, error)
}

type chatWithOtomoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatWithOtomoServiceClient(cc grpc.ClientConnInterface) ChatWithOtomoServiceClient {
	return &chatWithOtomoServiceClient{cc}
}

func (c *chatWithOtomoServiceClient) MessageToOtomo(ctx context.Context, in *ChatWithOtomoMessageToOtomoRequest, opts ...grpc.CallOption) (*ChatWithOtomoMessageToOtomoResponse, error) {
	out := new(ChatWithOtomoMessageToOtomoResponse)
	err := c.cc.Invoke(ctx, ChatWithOtomoService_MessageToOtomo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatWithOtomoServiceServer is the server API for ChatWithOtomoService service.
// All implementations should embed UnimplementedChatWithOtomoServiceServer
// for forward compatibility
type ChatWithOtomoServiceServer interface {
	MessageToOtomo(context.Context, *ChatWithOtomoMessageToOtomoRequest) (*ChatWithOtomoMessageToOtomoResponse, error)
}

// UnimplementedChatWithOtomoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatWithOtomoServiceServer struct {
}

func (UnimplementedChatWithOtomoServiceServer) MessageToOtomo(context.Context, *ChatWithOtomoMessageToOtomoRequest) (*ChatWithOtomoMessageToOtomoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageToOtomo not implemented")
}

// UnsafeChatWithOtomoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatWithOtomoServiceServer will
// result in compilation errors.
type UnsafeChatWithOtomoServiceServer interface {
	mustEmbedUnimplementedChatWithOtomoServiceServer()
}

func RegisterChatWithOtomoServiceServer(s grpc.ServiceRegistrar, srv ChatWithOtomoServiceServer) {
	s.RegisterService(&ChatWithOtomoService_ServiceDesc, srv)
}

func _ChatWithOtomoService_MessageToOtomo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatWithOtomoMessageToOtomoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatWithOtomoServiceServer).MessageToOtomo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatWithOtomoService_MessageToOtomo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatWithOtomoServiceServer).MessageToOtomo(ctx, req.(*ChatWithOtomoMessageToOtomoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatWithOtomoService_ServiceDesc is the grpc.ServiceDesc for ChatWithOtomoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatWithOtomoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatWithOtomoService",
	HandlerType: (*ChatWithOtomoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MessageToOtomo",
			Handler:    _ChatWithOtomoService_MessageToOtomo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat_with_otomo_service.proto",
}
