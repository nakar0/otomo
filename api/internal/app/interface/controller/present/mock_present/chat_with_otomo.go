// Code generated by MockGen. DO NOT EDIT.
// Source: chat_with_otomo.go

// Package mock_present is a generated GoMock package.
package mock_present

import (
	context "context"
	message "otomo/internal/app/domain/entity/message"
	grpcgen "otomo/internal/app/interface/controller/grpc/grpcgen"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	status "google.golang.org/grpc/status"
)

// MockChatWithOtomoPresenter is a mock of ChatWithOtomoPresenter interface.
type MockChatWithOtomoPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockChatWithOtomoPresenterMockRecorder
}

// MockChatWithOtomoPresenterMockRecorder is the mock recorder for MockChatWithOtomoPresenter.
type MockChatWithOtomoPresenterMockRecorder struct {
	mock *MockChatWithOtomoPresenter
}

// NewMockChatWithOtomoPresenter creates a new mock instance.
func NewMockChatWithOtomoPresenter(ctrl *gomock.Controller) *MockChatWithOtomoPresenter {
	mock := &MockChatWithOtomoPresenter{ctrl: ctrl}
	mock.recorder = &MockChatWithOtomoPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatWithOtomoPresenter) EXPECT() *MockChatWithOtomoPresenterMockRecorder {
	return m.recorder
}

// ErrorOutput mocks base method.
func (m *MockChatWithOtomoPresenter) ErrorOutput(ctx context.Context, err error) *status.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorOutput", ctx, err)
	ret0, _ := ret[0].(*status.Status)
	return ret0
}

// ErrorOutput indicates an expected call of ErrorOutput.
func (mr *MockChatWithOtomoPresenterMockRecorder) ErrorOutput(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorOutput", reflect.TypeOf((*MockChatWithOtomoPresenter)(nil).ErrorOutput), ctx, err)
}

// MessageToOtomoOutput mocks base method.
func (m *MockChatWithOtomoPresenter) MessageToOtomoOutput(ctx context.Context, msg *message.MessageWithOtomo) (*grpcgen.ChatWithOtomoMessageToOtomoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageToOtomoOutput", ctx, msg)
	ret0, _ := ret[0].(*grpcgen.ChatWithOtomoMessageToOtomoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageToOtomoOutput indicates an expected call of MessageToOtomoOutput.
func (mr *MockChatWithOtomoPresenterMockRecorder) MessageToOtomoOutput(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageToOtomoOutput", reflect.TypeOf((*MockChatWithOtomoPresenter)(nil).MessageToOtomoOutput), ctx, msg)
}
