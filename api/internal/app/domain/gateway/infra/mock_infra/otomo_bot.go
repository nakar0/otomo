// Code generated by MockGen. DO NOT EDIT.
// Source: otomo_bot.go

// Package mock_infra is a generated GoMock package.
package mock_infra

import (
	context "context"
	message "otomo/internal/app/domain/entity/message"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOtomoBot is a mock of OtomoBot interface.
type MockOtomoBot struct {
	ctrl     *gomock.Controller
	recorder *MockOtomoBotMockRecorder
}

// MockOtomoBotMockRecorder is the mock recorder for MockOtomoBot.
type MockOtomoBotMockRecorder struct {
	mock *MockOtomoBot
}

// NewMockOtomoBot creates a new mock instance.
func NewMockOtomoBot(ctrl *gomock.Controller) *MockOtomoBot {
	mock := &MockOtomoBot{ctrl: ctrl}
	mock.recorder = &MockOtomoBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOtomoBot) EXPECT() *MockOtomoBotMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockOtomoBot) SendMessage(ctx context.Context, msg *message.MessageWithOtomo) (*message.MessageWithOtomo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, msg)
	ret0, _ := ret[0].(*message.MessageWithOtomo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockOtomoBotMockRecorder) SendMessage(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockOtomoBot)(nil).SendMessage), ctx, msg)
}
