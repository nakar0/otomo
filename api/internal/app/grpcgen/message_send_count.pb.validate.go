// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: message_send_count.proto

package grpcgen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on MessageSentCount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MessageSentCount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageSentCount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageSentCountMultiError, or nil if none found.
func (m *MessageSentCount) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageSentCount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMonthlySurplus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageSentCountValidationError{
					field:  "MonthlySurplus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageSentCountValidationError{
					field:  "MonthlySurplus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMonthlySurplus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageSentCountValidationError{
				field:  "MonthlySurplus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDaily()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageSentCountValidationError{
					field:  "Daily",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageSentCountValidationError{
					field:  "Daily",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDaily()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageSentCountValidationError{
				field:  "Daily",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MessageSentCountMultiError(errors)
	}
	return nil
}

// MessageSentCountMultiError is an error wrapping multiple validation errors
// returned by MessageSentCount.ValidateAll() if the designated constraints
// aren't met.
type MessageSentCountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageSentCountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageSentCountMultiError) AllErrors() []error { return m }

// MessageSentCountValidationError is the validation error returned by
// MessageSentCount.Validate if the designated constraints aren't met.
type MessageSentCountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageSentCountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageSentCountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageSentCountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageSentCountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageSentCountValidationError) ErrorName() string { return "MessageSentCountValidationError" }

// Error satisfies the builtin error interface
func (e MessageSentCountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageSentCount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageSentCountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageSentCountValidationError{}

// Validate checks the field values on MonthlySurplusMessageSentCount with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MonthlySurplusMessageSentCount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonthlySurplusMessageSentCount with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MonthlySurplusMessageSentCountMultiError, or nil if none found.
func (m *MonthlySurplusMessageSentCount) ValidateAll() error {
	return m.validate(true)
}

func (m *MonthlySurplusMessageSentCount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetYearMonth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MonthlySurplusMessageSentCountValidationError{
					field:  "YearMonth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MonthlySurplusMessageSentCountValidationError{
					field:  "YearMonth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetYearMonth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MonthlySurplusMessageSentCountValidationError{
				field:  "YearMonth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Count

	if len(errors) > 0 {
		return MonthlySurplusMessageSentCountMultiError(errors)
	}
	return nil
}

// MonthlySurplusMessageSentCountMultiError is an error wrapping multiple
// validation errors returned by MonthlySurplusMessageSentCount.ValidateAll()
// if the designated constraints aren't met.
type MonthlySurplusMessageSentCountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonthlySurplusMessageSentCountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonthlySurplusMessageSentCountMultiError) AllErrors() []error { return m }

// MonthlySurplusMessageSentCountValidationError is the validation error
// returned by MonthlySurplusMessageSentCount.Validate if the designated
// constraints aren't met.
type MonthlySurplusMessageSentCountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonthlySurplusMessageSentCountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonthlySurplusMessageSentCountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonthlySurplusMessageSentCountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonthlySurplusMessageSentCountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonthlySurplusMessageSentCountValidationError) ErrorName() string {
	return "MonthlySurplusMessageSentCountValidationError"
}

// Error satisfies the builtin error interface
func (e MonthlySurplusMessageSentCountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonthlySurplusMessageSentCount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonthlySurplusMessageSentCountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonthlySurplusMessageSentCountValidationError{}

// Validate checks the field values on DailyMessageSentCount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DailyMessageSentCount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DailyMessageSentCount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DailyMessageSentCountMultiError, or nil if none found.
func (m *DailyMessageSentCount) ValidateAll() error {
	return m.validate(true)
}

func (m *DailyMessageSentCount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DailyMessageSentCountValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DailyMessageSentCountValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DailyMessageSentCountValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Count

	if len(errors) > 0 {
		return DailyMessageSentCountMultiError(errors)
	}
	return nil
}

// DailyMessageSentCountMultiError is an error wrapping multiple validation
// errors returned by DailyMessageSentCount.ValidateAll() if the designated
// constraints aren't met.
type DailyMessageSentCountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DailyMessageSentCountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DailyMessageSentCountMultiError) AllErrors() []error { return m }

// DailyMessageSentCountValidationError is the validation error returned by
// DailyMessageSentCount.Validate if the designated constraints aren't met.
type DailyMessageSentCountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DailyMessageSentCountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DailyMessageSentCountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DailyMessageSentCountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DailyMessageSentCountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DailyMessageSentCountValidationError) ErrorName() string {
	return "DailyMessageSentCountValidationError"
}

// Error satisfies the builtin error interface
func (e DailyMessageSentCountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDailyMessageSentCount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DailyMessageSentCountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DailyMessageSentCountValidationError{}

// Validate checks the field values on RemainingMessageSendCount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemainingMessageSendCount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemainingMessageSendCount with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemainingMessageSendCountMultiError, or nil if none found.
func (m *RemainingMessageSendCount) ValidateAll() error {
	return m.validate(true)
}

func (m *RemainingMessageSendCount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMonthlySurplus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemainingMessageSendCountValidationError{
					field:  "MonthlySurplus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemainingMessageSendCountValidationError{
					field:  "MonthlySurplus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMonthlySurplus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemainingMessageSendCountValidationError{
				field:  "MonthlySurplus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDaily()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemainingMessageSendCountValidationError{
					field:  "Daily",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemainingMessageSendCountValidationError{
					field:  "Daily",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDaily()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemainingMessageSendCountValidationError{
				field:  "Daily",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemainingMessageSendCountMultiError(errors)
	}
	return nil
}

// RemainingMessageSendCountMultiError is an error wrapping multiple validation
// errors returned by RemainingMessageSendCount.ValidateAll() if the
// designated constraints aren't met.
type RemainingMessageSendCountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemainingMessageSendCountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemainingMessageSendCountMultiError) AllErrors() []error { return m }

// RemainingMessageSendCountValidationError is the validation error returned by
// RemainingMessageSendCount.Validate if the designated constraints aren't met.
type RemainingMessageSendCountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemainingMessageSendCountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemainingMessageSendCountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemainingMessageSendCountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemainingMessageSendCountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemainingMessageSendCountValidationError) ErrorName() string {
	return "RemainingMessageSendCountValidationError"
}

// Error satisfies the builtin error interface
func (e RemainingMessageSendCountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemainingMessageSendCount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemainingMessageSendCountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemainingMessageSendCountValidationError{}

// Validate checks the field values on RemainingMonthlySurplusMessageSendCount
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RemainingMonthlySurplusMessageSendCount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RemainingMonthlySurplusMessageSendCount with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RemainingMonthlySurplusMessageSendCountMultiError, or nil if none found.
func (m *RemainingMonthlySurplusMessageSendCount) ValidateAll() error {
	return m.validate(true)
}

func (m *RemainingMonthlySurplusMessageSendCount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetYearMonth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemainingMonthlySurplusMessageSendCountValidationError{
					field:  "YearMonth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemainingMonthlySurplusMessageSendCountValidationError{
					field:  "YearMonth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetYearMonth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemainingMonthlySurplusMessageSendCountValidationError{
				field:  "YearMonth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Count

	if len(errors) > 0 {
		return RemainingMonthlySurplusMessageSendCountMultiError(errors)
	}
	return nil
}

// RemainingMonthlySurplusMessageSendCountMultiError is an error wrapping
// multiple validation errors returned by
// RemainingMonthlySurplusMessageSendCount.ValidateAll() if the designated
// constraints aren't met.
type RemainingMonthlySurplusMessageSendCountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemainingMonthlySurplusMessageSendCountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemainingMonthlySurplusMessageSendCountMultiError) AllErrors() []error { return m }

// RemainingMonthlySurplusMessageSendCountValidationError is the validation
// error returned by RemainingMonthlySurplusMessageSendCount.Validate if the
// designated constraints aren't met.
type RemainingMonthlySurplusMessageSendCountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemainingMonthlySurplusMessageSendCountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemainingMonthlySurplusMessageSendCountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemainingMonthlySurplusMessageSendCountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemainingMonthlySurplusMessageSendCountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemainingMonthlySurplusMessageSendCountValidationError) ErrorName() string {
	return "RemainingMonthlySurplusMessageSendCountValidationError"
}

// Error satisfies the builtin error interface
func (e RemainingMonthlySurplusMessageSendCountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemainingMonthlySurplusMessageSendCount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemainingMonthlySurplusMessageSendCountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemainingMonthlySurplusMessageSendCountValidationError{}

// Validate checks the field values on RemainingDailyMessageSendCount with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemainingDailyMessageSendCount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemainingDailyMessageSendCount with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemainingDailyMessageSendCountMultiError, or nil if none found.
func (m *RemainingDailyMessageSendCount) ValidateAll() error {
	return m.validate(true)
}

func (m *RemainingDailyMessageSendCount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemainingDailyMessageSendCountValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemainingDailyMessageSendCountValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemainingDailyMessageSendCountValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Count

	if len(errors) > 0 {
		return RemainingDailyMessageSendCountMultiError(errors)
	}
	return nil
}

// RemainingDailyMessageSendCountMultiError is an error wrapping multiple
// validation errors returned by RemainingDailyMessageSendCount.ValidateAll()
// if the designated constraints aren't met.
type RemainingDailyMessageSendCountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemainingDailyMessageSendCountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemainingDailyMessageSendCountMultiError) AllErrors() []error { return m }

// RemainingDailyMessageSendCountValidationError is the validation error
// returned by RemainingDailyMessageSendCount.Validate if the designated
// constraints aren't met.
type RemainingDailyMessageSendCountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemainingDailyMessageSendCountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemainingDailyMessageSendCountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemainingDailyMessageSendCountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemainingDailyMessageSendCountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemainingDailyMessageSendCountValidationError) ErrorName() string {
	return "RemainingDailyMessageSendCountValidationError"
}

// Error satisfies the builtin error interface
func (e RemainingDailyMessageSendCountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemainingDailyMessageSendCount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemainingDailyMessageSendCountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemainingDailyMessageSendCountValidationError{}
