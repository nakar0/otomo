// source: message_send_count.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var date_pb = require('./date_pb.js');
goog.object.extend(proto, date_pb);
goog.exportSymbol('proto.DailyMessageSentCount', null, global);
goog.exportSymbol('proto.MessageSentCount', null, global);
goog.exportSymbol('proto.MonthlySurplusMessageSentCount', null, global);
goog.exportSymbol('proto.RemainingDailyMessageSendCount', null, global);
goog.exportSymbol('proto.RemainingMessageSendCount', null, global);
goog.exportSymbol('proto.RemainingMonthlySurplusMessageSendCount', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MessageSentCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MessageSentCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MessageSentCount.displayName = 'proto.MessageSentCount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MonthlySurplusMessageSentCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MonthlySurplusMessageSentCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MonthlySurplusMessageSentCount.displayName = 'proto.MonthlySurplusMessageSentCount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DailyMessageSentCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DailyMessageSentCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DailyMessageSentCount.displayName = 'proto.DailyMessageSentCount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemainingMessageSendCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemainingMessageSendCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RemainingMessageSendCount.displayName = 'proto.RemainingMessageSendCount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemainingMonthlySurplusMessageSendCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemainingMonthlySurplusMessageSendCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RemainingMonthlySurplusMessageSendCount.displayName = 'proto.RemainingMonthlySurplusMessageSendCount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemainingDailyMessageSendCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemainingDailyMessageSendCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RemainingDailyMessageSendCount.displayName = 'proto.RemainingDailyMessageSendCount';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MessageSentCount.prototype.toObject = function(opt_includeInstance) {
  return proto.MessageSentCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MessageSentCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageSentCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    monthlySurplus: (f = msg.getMonthlySurplus()) && proto.MonthlySurplusMessageSentCount.toObject(includeInstance, f),
    daily: (f = msg.getDaily()) && proto.DailyMessageSentCount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MessageSentCount}
 */
proto.MessageSentCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MessageSentCount;
  return proto.MessageSentCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MessageSentCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MessageSentCount}
 */
proto.MessageSentCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MonthlySurplusMessageSentCount;
      reader.readMessage(value,proto.MonthlySurplusMessageSentCount.deserializeBinaryFromReader);
      msg.setMonthlySurplus(value);
      break;
    case 2:
      var value = new proto.DailyMessageSentCount;
      reader.readMessage(value,proto.DailyMessageSentCount.deserializeBinaryFromReader);
      msg.setDaily(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MessageSentCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MessageSentCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MessageSentCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageSentCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonthlySurplus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MonthlySurplusMessageSentCount.serializeBinaryToWriter
    );
  }
  f = message.getDaily();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.DailyMessageSentCount.serializeBinaryToWriter
    );
  }
};


/**
 * optional MonthlySurplusMessageSentCount monthly_surplus = 1;
 * @return {?proto.MonthlySurplusMessageSentCount}
 */
proto.MessageSentCount.prototype.getMonthlySurplus = function() {
  return /** @type{?proto.MonthlySurplusMessageSentCount} */ (
    jspb.Message.getWrapperField(this, proto.MonthlySurplusMessageSentCount, 1));
};


/**
 * @param {?proto.MonthlySurplusMessageSentCount|undefined} value
 * @return {!proto.MessageSentCount} returns this
*/
proto.MessageSentCount.prototype.setMonthlySurplus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MessageSentCount} returns this
 */
proto.MessageSentCount.prototype.clearMonthlySurplus = function() {
  return this.setMonthlySurplus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MessageSentCount.prototype.hasMonthlySurplus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DailyMessageSentCount daily = 2;
 * @return {?proto.DailyMessageSentCount}
 */
proto.MessageSentCount.prototype.getDaily = function() {
  return /** @type{?proto.DailyMessageSentCount} */ (
    jspb.Message.getWrapperField(this, proto.DailyMessageSentCount, 2));
};


/**
 * @param {?proto.DailyMessageSentCount|undefined} value
 * @return {!proto.MessageSentCount} returns this
*/
proto.MessageSentCount.prototype.setDaily = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MessageSentCount} returns this
 */
proto.MessageSentCount.prototype.clearDaily = function() {
  return this.setDaily(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MessageSentCount.prototype.hasDaily = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MonthlySurplusMessageSentCount.prototype.toObject = function(opt_includeInstance) {
  return proto.MonthlySurplusMessageSentCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MonthlySurplusMessageSentCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MonthlySurplusMessageSentCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    yearMonth: (f = msg.getYearMonth()) && date_pb.YearMonth.toObject(includeInstance, f),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MonthlySurplusMessageSentCount}
 */
proto.MonthlySurplusMessageSentCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MonthlySurplusMessageSentCount;
  return proto.MonthlySurplusMessageSentCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MonthlySurplusMessageSentCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MonthlySurplusMessageSentCount}
 */
proto.MonthlySurplusMessageSentCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new date_pb.YearMonth;
      reader.readMessage(value,date_pb.YearMonth.deserializeBinaryFromReader);
      msg.setYearMonth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MonthlySurplusMessageSentCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MonthlySurplusMessageSentCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MonthlySurplusMessageSentCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MonthlySurplusMessageSentCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYearMonth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      date_pb.YearMonth.serializeBinaryToWriter
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional YearMonth year_month = 1;
 * @return {?proto.YearMonth}
 */
proto.MonthlySurplusMessageSentCount.prototype.getYearMonth = function() {
  return /** @type{?proto.YearMonth} */ (
    jspb.Message.getWrapperField(this, date_pb.YearMonth, 1));
};


/**
 * @param {?proto.YearMonth|undefined} value
 * @return {!proto.MonthlySurplusMessageSentCount} returns this
*/
proto.MonthlySurplusMessageSentCount.prototype.setYearMonth = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MonthlySurplusMessageSentCount} returns this
 */
proto.MonthlySurplusMessageSentCount.prototype.clearYearMonth = function() {
  return this.setYearMonth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MonthlySurplusMessageSentCount.prototype.hasYearMonth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.MonthlySurplusMessageSentCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MonthlySurplusMessageSentCount} returns this
 */
proto.MonthlySurplusMessageSentCount.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DailyMessageSentCount.prototype.toObject = function(opt_includeInstance) {
  return proto.DailyMessageSentCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DailyMessageSentCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DailyMessageSentCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    date: (f = msg.getDate()) && date_pb.Date.toObject(includeInstance, f),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DailyMessageSentCount}
 */
proto.DailyMessageSentCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DailyMessageSentCount;
  return proto.DailyMessageSentCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DailyMessageSentCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DailyMessageSentCount}
 */
proto.DailyMessageSentCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new date_pb.Date;
      reader.readMessage(value,date_pb.Date.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DailyMessageSentCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DailyMessageSentCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DailyMessageSentCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DailyMessageSentCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      date_pb.Date.serializeBinaryToWriter
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Date date = 1;
 * @return {?proto.Date}
 */
proto.DailyMessageSentCount.prototype.getDate = function() {
  return /** @type{?proto.Date} */ (
    jspb.Message.getWrapperField(this, date_pb.Date, 1));
};


/**
 * @param {?proto.Date|undefined} value
 * @return {!proto.DailyMessageSentCount} returns this
*/
proto.DailyMessageSentCount.prototype.setDate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DailyMessageSentCount} returns this
 */
proto.DailyMessageSentCount.prototype.clearDate = function() {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DailyMessageSentCount.prototype.hasDate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.DailyMessageSentCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DailyMessageSentCount} returns this
 */
proto.DailyMessageSentCount.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemainingMessageSendCount.prototype.toObject = function(opt_includeInstance) {
  return proto.RemainingMessageSendCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemainingMessageSendCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemainingMessageSendCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    monthlySurplus: (f = msg.getMonthlySurplus()) && proto.RemainingMonthlySurplusMessageSendCount.toObject(includeInstance, f),
    daily: (f = msg.getDaily()) && proto.RemainingDailyMessageSendCount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemainingMessageSendCount}
 */
proto.RemainingMessageSendCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemainingMessageSendCount;
  return proto.RemainingMessageSendCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemainingMessageSendCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemainingMessageSendCount}
 */
proto.RemainingMessageSendCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RemainingMonthlySurplusMessageSendCount;
      reader.readMessage(value,proto.RemainingMonthlySurplusMessageSendCount.deserializeBinaryFromReader);
      msg.setMonthlySurplus(value);
      break;
    case 2:
      var value = new proto.RemainingDailyMessageSendCount;
      reader.readMessage(value,proto.RemainingDailyMessageSendCount.deserializeBinaryFromReader);
      msg.setDaily(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemainingMessageSendCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RemainingMessageSendCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RemainingMessageSendCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemainingMessageSendCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonthlySurplus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RemainingMonthlySurplusMessageSendCount.serializeBinaryToWriter
    );
  }
  f = message.getDaily();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.RemainingDailyMessageSendCount.serializeBinaryToWriter
    );
  }
};


/**
 * optional RemainingMonthlySurplusMessageSendCount monthly_surplus = 1;
 * @return {?proto.RemainingMonthlySurplusMessageSendCount}
 */
proto.RemainingMessageSendCount.prototype.getMonthlySurplus = function() {
  return /** @type{?proto.RemainingMonthlySurplusMessageSendCount} */ (
    jspb.Message.getWrapperField(this, proto.RemainingMonthlySurplusMessageSendCount, 1));
};


/**
 * @param {?proto.RemainingMonthlySurplusMessageSendCount|undefined} value
 * @return {!proto.RemainingMessageSendCount} returns this
*/
proto.RemainingMessageSendCount.prototype.setMonthlySurplus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RemainingMessageSendCount} returns this
 */
proto.RemainingMessageSendCount.prototype.clearMonthlySurplus = function() {
  return this.setMonthlySurplus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RemainingMessageSendCount.prototype.hasMonthlySurplus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RemainingDailyMessageSendCount daily = 2;
 * @return {?proto.RemainingDailyMessageSendCount}
 */
proto.RemainingMessageSendCount.prototype.getDaily = function() {
  return /** @type{?proto.RemainingDailyMessageSendCount} */ (
    jspb.Message.getWrapperField(this, proto.RemainingDailyMessageSendCount, 2));
};


/**
 * @param {?proto.RemainingDailyMessageSendCount|undefined} value
 * @return {!proto.RemainingMessageSendCount} returns this
*/
proto.RemainingMessageSendCount.prototype.setDaily = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RemainingMessageSendCount} returns this
 */
proto.RemainingMessageSendCount.prototype.clearDaily = function() {
  return this.setDaily(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RemainingMessageSendCount.prototype.hasDaily = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemainingMonthlySurplusMessageSendCount.prototype.toObject = function(opt_includeInstance) {
  return proto.RemainingMonthlySurplusMessageSendCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemainingMonthlySurplusMessageSendCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemainingMonthlySurplusMessageSendCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    yearMonth: (f = msg.getYearMonth()) && date_pb.YearMonth.toObject(includeInstance, f),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemainingMonthlySurplusMessageSendCount}
 */
proto.RemainingMonthlySurplusMessageSendCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemainingMonthlySurplusMessageSendCount;
  return proto.RemainingMonthlySurplusMessageSendCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemainingMonthlySurplusMessageSendCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemainingMonthlySurplusMessageSendCount}
 */
proto.RemainingMonthlySurplusMessageSendCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new date_pb.YearMonth;
      reader.readMessage(value,date_pb.YearMonth.deserializeBinaryFromReader);
      msg.setYearMonth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemainingMonthlySurplusMessageSendCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RemainingMonthlySurplusMessageSendCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RemainingMonthlySurplusMessageSendCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemainingMonthlySurplusMessageSendCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYearMonth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      date_pb.YearMonth.serializeBinaryToWriter
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional YearMonth year_month = 1;
 * @return {?proto.YearMonth}
 */
proto.RemainingMonthlySurplusMessageSendCount.prototype.getYearMonth = function() {
  return /** @type{?proto.YearMonth} */ (
    jspb.Message.getWrapperField(this, date_pb.YearMonth, 1));
};


/**
 * @param {?proto.YearMonth|undefined} value
 * @return {!proto.RemainingMonthlySurplusMessageSendCount} returns this
*/
proto.RemainingMonthlySurplusMessageSendCount.prototype.setYearMonth = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RemainingMonthlySurplusMessageSendCount} returns this
 */
proto.RemainingMonthlySurplusMessageSendCount.prototype.clearYearMonth = function() {
  return this.setYearMonth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RemainingMonthlySurplusMessageSendCount.prototype.hasYearMonth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.RemainingMonthlySurplusMessageSendCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.RemainingMonthlySurplusMessageSendCount} returns this
 */
proto.RemainingMonthlySurplusMessageSendCount.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemainingDailyMessageSendCount.prototype.toObject = function(opt_includeInstance) {
  return proto.RemainingDailyMessageSendCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemainingDailyMessageSendCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemainingDailyMessageSendCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    date: (f = msg.getDate()) && date_pb.Date.toObject(includeInstance, f),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemainingDailyMessageSendCount}
 */
proto.RemainingDailyMessageSendCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemainingDailyMessageSendCount;
  return proto.RemainingDailyMessageSendCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemainingDailyMessageSendCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemainingDailyMessageSendCount}
 */
proto.RemainingDailyMessageSendCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new date_pb.Date;
      reader.readMessage(value,date_pb.Date.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemainingDailyMessageSendCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RemainingDailyMessageSendCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RemainingDailyMessageSendCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemainingDailyMessageSendCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      date_pb.Date.serializeBinaryToWriter
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Date date = 1;
 * @return {?proto.Date}
 */
proto.RemainingDailyMessageSendCount.prototype.getDate = function() {
  return /** @type{?proto.Date} */ (
    jspb.Message.getWrapperField(this, date_pb.Date, 1));
};


/**
 * @param {?proto.Date|undefined} value
 * @return {!proto.RemainingDailyMessageSendCount} returns this
*/
proto.RemainingDailyMessageSendCount.prototype.setDate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RemainingDailyMessageSendCount} returns this
 */
proto.RemainingDailyMessageSendCount.prototype.clearDate = function() {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RemainingDailyMessageSendCount.prototype.hasDate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.RemainingDailyMessageSendCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.RemainingDailyMessageSendCount} returns this
 */
proto.RemainingDailyMessageSendCount.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto);
